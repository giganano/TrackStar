#!/usr/bin/env python
#
# This file is part of the trackfitting package.
# Copyright (C) 2023 James W. Johnson (giganano9@gmail.com)
# License: MIT License. See LICENSE in top-level directory
# at: https://github.com/giganano/trackfitting.git.

MIN_PYTHON_VERSION = "3.7.0" # this version requires >= 3.7.0
import sys
import os
if sys.version_info[:3] < tuple([int(_) for _ in MIN_PYTHON_VERSION.split('.')]):
	raise RuntimeError("""\
Python version %s required. Current version: %d.%d.%d""" % (
		MIN_PYTHON_VERSION, sys.version_info.major, sys.version_info.minor,
		sys.version_info.micro))
from setuptools import setup, Extension

# partial import
import builtins
builtins.__TRACKFITTING_SETUP__ = True
import trackfitting

# ---------------------------- PACKAGE METADATA ---------------------------- #
package_name = "trackfitting"
repo_url = "https://github.com/giganano/trackfitting.git"
bugs_url = "https://github.com/giganano/trackfitting/issues"

CLASSIFIERS = """\
Development Status :: 1 - Planning
Intended Audience :: Science/Research
License :: OSI Approved :: MIT License
Natural Language :: English
Operating System :: MacOS
Operating System :: POSIX
Operating System :: Unix
Programming Language :: C
Programming Language :: Cython
Programming Language :: Python
Programming Language :: Python :: 3
Programming Language :: Python :: 3.7
Programming Language :: Python :: 3.8
Programming Language :: Python :: 3.9
Programming Language :: Python :: 3.10
Programming Language :: Python :: 3.11
Programming Language :: Python :: 3 :: Only
Programming Language :: Python :: Implementation :: CPython
Topic :: Scientific/Engineering
Topic :: Scientific/Engineering :: Astronomy
Topic :: Scientific/Engineering :: Physics
"""

# -------------------------- VERSION INFORMATION -------------------------- #
VERSION = {
	"major": 		0,
	"minor": 		0,
	"micro":	 	0,
	"dev": 			0,
	"alpha": 		None,
	"beta": 		None,
	"rc": 			None,
	"post": 		None,
	"isreleased":	False
}

def write_version_info(filename = "./trackfitting/version_breakdown.dat"):
	r"""
	Writes the current version info to disk within the source tree.

	Parameters
	----------
	filename : ``str`` [default : "./trackfitting/version_breakdown.dat"]
		The file to write the version info at.

	.. note:: trackfitting/version.py depends on the file produced by this
		function.
	"""

	version = trackfitting.version(**VERSION)
	with open(filename, 'w') as out:
		out.write("# This file was generated by trackfitting setup.py ")
		out.write("version %s\n" % (str(version)))
		for key in VERSION.keys(): out.write("%s\t%s\n" % (key,
			str(VERSION[key])))
		out.close()


def setup_package():
	r"""
	Compile and install.
	"""
	src_path = os.path.dirname(os.path.abspath(sys.argv[0]))
	old_path = os.getcwd()
	os.chdir(src_path)
	sys.path.insert(0, src_path)

	# directories with .h header files, req'd by setup
	include_dirs = []
	for root, dirs, files in os.walk("./trackfitting/core/src"):
		if any([_.endswith(".h") for _ in files]): include_dirs.append(root)

	metadata = dict(
		name = package_name,
		version = str(trackfitting.version(**VERSION)),
		author = "James W. Johnson",
		author_email = "giganano9@gmail.com",
		maintainer = "James W. Johnson",
		maintainer_email = "giganano9@gmail.com",
		url = repo_url,
		project_urls = {
			"Bug Tracker": bugs_url,
			"Source Code": repo_url
		},
		classifiers = CLASSIFIERS.split("\n"),
		license = "MIT",
		platforms = ["Linux, Mac OS X", "Unix"],
		provides = [package_name],
		include_dirs = include_dirs,
		setup_requires = [
			"setuptools>=18.0", #automatically handles Cython extensions
			"Cython>=0.29.0"
		],
		python_requires=">=3.7.*,<4",
		zip_safe = False,
		verbose = "-q" not in sys.argv and "--quiet" not in sys.argv
	)

	try:
		write_version_info()
		setup(**metadata)
	finally:
		del sys.path[0]
		os.chdir(old_path)
	return


if __name__ == "__main__":
	setup_package()
	del builtins.__TRACKFITTING_SETUP__

